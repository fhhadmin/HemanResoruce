{"remainingRequest":"D:\\Vue_WorkSpace\\sg-Admin\\node_modules\\babel-loader\\lib\\index.js!D:\\Vue_WorkSpace\\sg-Admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Vue_WorkSpace\\sg-Admin\\src\\components\\editableTables\\editableTables.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\Vue_WorkSpace\\sg-Admin\\src\\components\\editableTables\\editableTables.vue","mtime":1551661427659},{"path":"D:\\Vue_WorkSpace\\sg-Admin\\.babelrc","mtime":1551258011000},{"path":"D:\\Vue_WorkSpace\\sg-Admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1551930361523},{"path":"D:\\Vue_WorkSpace\\sg-Admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1526583314000},{"path":"D:\\Vue_WorkSpace\\sg-Admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1526010763000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport clonedeep from 'clonedeep';\nexport default {\n  data: function data() {\n    return {\n      editableId: '',\n      processingLolumns: [],\n      inputValue: '',\n      selectValueInput: '',\n      modelSelect: '',\n      progress: false\n    };\n  },\n  props: {\n    columns: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    showPage: {\n      type: Boolean,\n      default: true\n    },\n    tableWidth: {\n      default: '100%'\n    },\n    value: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    selectOption: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    stateSelect: {\n      type: Boolean,\n      default: true\n    },\n    pageTotal: {\n      default: '1'\n    },\n    selectShow: {\n      type: Boolean,\n      default: true\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    selectSatae: {\n      type: String,\n      default: ''\n    }\n  },\n  methods: {\n    // 点击编辑\n    handleClick: function handleClick(_ref) {\n      var row = _ref.row,\n          column = _ref.column,\n          index = _ref.index;\n\n      if (\"\".concat(column.key, \"_\").concat(index) === this.editableId) {\n        // 深拷贝\n        var tableData = clonedeep(this.value);\n        tableData[index][column.key] = this.inputValue;\n        if (this.inputValue) this.$emit('input', tableData);\n        this.editableId = '';\n        this.inputValue = '';\n      } else {\n        // 写入标识\n        this.editableId = \"\".concat(column.key, \"_\").concat(index);\n      }\n    },\n    // 写入数据触发\n    handleInput: function handleInput(newValue) {\n      this.inputValue = newValue;\n    },\n    // 可编辑数据初始化\n    compileInit: function compileInit() {\n      var _this = this;\n\n      var h = this.$createElement;\n      // 初始化表格\n      var processingLolumns = this.columns.map(function (item) {\n        // 判断是否有可编辑数据 是否有render\n        if (item.editable && !item.render) {\n          // row当前行数据 当前列数据column 当前列索引index\n          item.render = function (h, _ref2) {\n            var row = _ref2.row,\n                column = _ref2.column,\n                index = _ref2.index;\n            // 比较状态\n            var isEditable = _this.editableId === \"\".concat(column.key, \"_\").concat(index);\n            return h(\"div\", [isEditable ? h(\"i-input\", {\n              on: {\n                \"input\": _this.handleInput\n              },\n              attrs: {\n                value: row[column.key]\n              },\n              style: \"width: 50px\"\n            }) : h(\"span\", [row[column.key]]), h(\"i-button\", {\n              on: {\n                \"click\": _this.handleClick.bind(_this, {\n                  row: row,\n                  column: column,\n                  index: index\n                })\n              }\n            }, [isEditable ? '保存' : '编辑'])]);\n          }; // 返回编辑数据\n\n\n          return item; // 返回原数据\n        } else return item;\n      }); // 这里要使用新的columns\n\n      this.processingLolumns = processingLolumns;\n    },\n    // 清空筛选条件\n    clickEmpty: function clickEmpty() {\n      var data = {};\n      data.selectValueInput = '';\n      data.modelSelect = '';\n      this.$emit('filtrateClick', data);\n    },\n    // 清空筛选\n    selectEmpty: function selectEmpty() {\n      this.selectValueInput = '';\n      this.modelSelect = '';\n    },\n    // 选中事件\n    onValue: function onValue(e) {\n      // 清空输入框数据\n      this.selectValueInput = '';\n      this.$emit('onChange', e);\n    },\n    // 提交选择内容事件\n    update: function update(e) {\n      var data = {};\n      data.selectValueInput = this.selectValueInput ? this.selectValueInput : '';\n      data.modelSelect = this.modelSelect ? this.modelSelect : '';\n\n      if (this.modelSelect) {\n        this.$emit('filtrateClick', data);\n      } else {\n        this.$Message.error('请输入要搜索的字段');\n      }\n    },\n    // 改变 page\n    emitPage: function emitPage(e) {\n      this.$emit('getPage', e);\n    },\n    selectionChange: function selectionChange(selection) {\n      this.$emit('selectionChange', selection);\n    },\n    onSelect: function onSelect(selction) {\n      this.$emit('on-select', selction);\n    }\n  },\n  mounted: function mounted() {\n    // 初始化编辑\n    this.compileInit();\n  },\n  watch: {\n    isLoading: function isLoading(newValue) {\n      this.progress = newValue;\n    },\n    'selectSatae': function selectSatae() {\n      this.selectEmpty();\n    }\n  }\n};",{"version":3,"sources":["editableTables.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;wBAEA;;kBAEA;yBACA;kBACA;wBACA;mBACA;gBACA,AACA;AAPA;AAQA;;;YAGA;;eACA,AACA;;AAHA;;YAKA;eACA,AACA;AAHA;;eAKA,AACA;AAFA;;YAIA;;eACA,AACA;;AAHA;;YAKA;;eACA,AACA;;AAHA;;YAKA;eACA,AACA;AAHA;;eAKA,AACA;AAFA;;YAIA;eACA,AACA;AAHA;;YAKA;eACA,AACA;AAHA;;YAKA;eACA,AACA,AACA;AAJA;AAnCA;;AAyCA;;AACA;;;;wEACA;AACA;uCACA;4CACA;iDACA;0BACA;0BACA;aACA;AACA;4DACA;AACA;AAEA;AACA;gDACA;wBACA;AAEA;AACA;;AACA;;;AACA;+DACA;AACA;;AAEA;;AACA;;;AACA;oFACA;AACA,mBACA;;;;;;;;uCACA;;;;;;;;oCACA,AACA,AACA;AACA,YAXA,CAYA;;;iBACA,MACA;sBACA;AACA,UACA;;+BACA;AAEA;AACA;sCACA;iBACA;8BACA;yBACA;kCACA;AACA;AACA;wCACA;8BACA;yBACA;AACA;AACA;iCACA;AACA;8BACA;6BACA;AAEA;AACA;+BACA;iBACA;8EACA;+DACA;;4BACA;oCACA;aACA;4BACA;AACA;AAEA;AACA;mCACA;4BACA;AACA;yDACA;oCACA;AACA;0CACA;8BACA;AACA,AACA;AAxFA;8BAyFA;AACA;SACA;AACA;;4CAEA;sBACA;AACA;0CACA;WACA;AACA,AACA;AAPA;AAhJA","file":"editableTables.vue","sourceRoot":"src\\components\\editableTables","sourcesContent":["<template>\r\n  <div>\r\n    <div style=\"display: inline-block; margin-bottom: 10px;vertical-align:top\" v-if=\"stateSelect\">\r\n      <div style=\"display: inline-block;\" v-if=\"selectShow\">\r\n        <Input v-model=\"selectValueInput\" style=\"width: 300px;\">\r\n          <Select v-model=\"modelSelect\" @on-clear=\"clickEmpty\" clearable slot=\"prepend\" @on-change=\"onValue\" style=\"width:80px\">\r\n            <Option v-for=\"item in selectOption\" :disabled=\"item.value === '-1'\" :value=\"item.value\"  :key=\"item.value\">{{ item.label }}</Option>\r\n          </Select>\r\n          <Button slot=\"append\" icon=\"ios-search\" @click=\"update\"></Button>\r\n        </Input>\r\n      </div>\r\n      <div style=\"display: inline-block;\">\r\n        <slot name='customSelect'></slot>\r\n      </div>\r\n      <div style=\"display: inline-block; vertical-align:top\">\r\n        <slot></slot>\r\n      </div>\r\n    </div>\r\n    <Table ref=\"selection\" stripe :columns=\"processingLolumns\" :data=\"value\" @on-selection-change=\"onSelect\" :loading=\"progress\" :width=\"tableWidth\"></Table>\r\n    <slot name='statistics'></slot>\r\n    <Page v-if=\"showPage\" :total=\"pageTotal * 10\" show-elevator @on-change='emitPage' @on-page-size-change='emitPage' style=\"margin-top: 20px\" />\r\n  </div>\r\n</template>\r\n<script>\r\nimport clonedeep from 'clonedeep'\r\nexport default ({\r\n  data () {\r\n    return {\r\n      editableId: '',\r\n      processingLolumns: [],\r\n      inputValue: '',\r\n      selectValueInput: '',\r\n      modelSelect: '',\r\n      progress: false\r\n    }\r\n  },\r\n  props: {\r\n    columns: {\r\n      type: Array,\r\n      default: () => ([])\r\n    },\r\n    showPage: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    tableWidth: {\r\n      default: '100%'\r\n    },\r\n    value: {\r\n      type: Array,\r\n      default: () => ([])\r\n    },\r\n    selectOption: {\r\n      type: Array,\r\n      default: () => ([])\r\n    },\r\n    stateSelect: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    pageTotal: {\r\n      default: '1'\r\n    },\r\n    selectShow: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    isLoading: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    selectSatae: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  methods: {\r\n    // 点击编辑\r\n    handleClick ({row, column, index}) {\r\n      if (`${column.key}_${index}` === this.editableId) {\r\n        // 深拷贝\r\n        let tableData = clonedeep(this.value)\r\n        tableData[index][column.key] = this.inputValue\r\n        if (this.inputValue) this.$emit('input', tableData)\r\n        this.editableId = ''\r\n        this.inputValue = ''\r\n      } else {\r\n        // 写入标识\r\n        this.editableId = `${column.key}_${index}`\r\n      }\r\n    },\r\n\r\n    // 写入数据触发\r\n    handleInput (newValue) {\r\n      this.inputValue = newValue\r\n    },\r\n\r\n    // 可编辑数据初始化\r\n    compileInit () {\r\n      // 初始化表格\r\n      const processingLolumns = this.columns.map(item => {\r\n        // 判断是否有可编辑数据 是否有render\r\n        if (item.editable && !item.render) {\r\n          // row当前行数据 当前列数据column 当前列索引index\r\n          item.render = (h, {row, column, index}) => {\r\n            // 比较状态\r\n            const isEditable = this.editableId === `${column.key}_${index}`\r\n            return (\r\n              <div>\r\n                {isEditable ? <i-input on-input={this.handleInput} value={row[column.key]} style=\"width: 50px\" /> : <span>{row[column.key]}</span>}\r\n                <i-button on-click={this.handleClick.bind(this, {row, column, index})}>{isEditable ? '保存' : '编辑'}</i-button>\r\n              </div>\r\n            )\r\n          }\r\n          // 返回编辑数据\r\n          return item\r\n          // 返回原数据\r\n        } else return item\r\n      })\r\n      // 这里要使用新的columns\r\n      this.processingLolumns = processingLolumns\r\n    },\r\n\r\n    // 清空筛选条件\r\n    clickEmpty () {\r\n      let data = {}\r\n      data.selectValueInput = ''\r\n      data.modelSelect = ''\r\n      this.$emit('filtrateClick', data)\r\n    },\r\n    // 清空筛选\r\n    selectEmpty () {\r\n      this.selectValueInput = ''\r\n      this.modelSelect = ''\r\n    },\r\n    // 选中事件\r\n    onValue (e) {\r\n      // 清空输入框数据\r\n      this.selectValueInput = ''\r\n      this.$emit('onChange', e)\r\n    },\r\n\r\n    // 提交选择内容事件\r\n    update (e) {\r\n      let data = {}\r\n      data.selectValueInput = this.selectValueInput ? this.selectValueInput : ''\r\n      data.modelSelect = this.modelSelect ? this.modelSelect : ''\r\n      if (this.modelSelect) {\r\n        this.$emit('filtrateClick', data)\r\n      } else {\r\n        this.$Message.error('请输入要搜索的字段')\r\n      }\r\n    },\r\n\r\n    // 改变 page\r\n    emitPage (e) {\r\n      this.$emit('getPage', e)\r\n    },\r\n    selectionChange (selection) {\r\n      this.$emit('selectionChange', selection)\r\n    },\r\n    onSelect (selction) {\r\n      this.$emit('on-select', selction)\r\n    }\r\n  },\r\n  mounted () {\r\n    // 初始化编辑\r\n    this.compileInit()\r\n  },\r\n  watch: {\r\n    isLoading: function (newValue) {\r\n      this.progress = newValue\r\n    },\r\n    'selectSatae' () {\r\n      this.selectEmpty()\r\n    }\r\n  }\r\n})\r\n</script>\r\n<style>\r\n</style>\r\n"]}]}