{"remainingRequest":"D:\\Vue_WorkSpace\\sg-Admin\\node_modules\\babel-loader\\lib\\index.js!D:\\Vue_WorkSpace\\sg-Admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Vue_WorkSpace\\sg-Admin\\src\\components\\main-new\\components\\tags-nav\\tags-nav.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\Vue_WorkSpace\\sg-Admin\\src\\components\\main-new\\components\\tags-nav\\tags-nav.vue","mtime":1551411055165},{"path":"D:\\Vue_WorkSpace\\sg-Admin\\.babelrc","mtime":1551258011000},{"path":"D:\\Vue_WorkSpace\\sg-Admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1551930361523},{"path":"D:\\Vue_WorkSpace\\sg-Admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1526583314000},{"path":"D:\\Vue_WorkSpace\\sg-Admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1526010763000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { showTitle, routeEqual } from '@/libs/util';\nimport beforeClose from '@/router/before-close';\nexport default {\n  name: 'TagsNav',\n  props: {\n    value: Object,\n    list: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      tagBodyLeft: 0,\n      rightOffset: 40,\n      outerPadding: 4,\n      contextMenuLeft: 0,\n      contextMenuTop: 0,\n      visible: false,\n      menuList: {\n        others: '关闭其他',\n        all: '关闭所有'\n      }\n    };\n  },\n  computed: {\n    currentRouteObj: function currentRouteObj() {\n      var _this$value = this.value,\n          name = _this$value.name,\n          params = _this$value.params,\n          query = _this$value.query;\n      return {\n        name: name,\n        params: params,\n        query: query\n      };\n    }\n  },\n  methods: {\n    handlescroll: function handlescroll(e) {\n      var type = e.type;\n      var delta = 0;\n\n      if (type === 'DOMMouseScroll' || type === 'mousewheel') {\n        delta = e.wheelDelta ? e.wheelDelta : -(e.detail || 0) * 40;\n      }\n\n      this.handleScroll(delta);\n    },\n    handleScroll: function handleScroll(offset) {\n      var outerWidth = this.$refs.scrollOuter.offsetWidth;\n      var bodyWidth = this.$refs.scrollBody.offsetWidth;\n\n      if (offset > 0) {\n        this.tagBodyLeft = Math.min(0, this.tagBodyLeft + offset);\n      } else {\n        if (outerWidth < bodyWidth) {\n          if (this.tagBodyLeft < -(bodyWidth - outerWidth)) {\n            this.tagBodyLeft = this.tagBodyLeft;\n          } else {\n            this.tagBodyLeft = Math.max(this.tagBodyLeft + offset, outerWidth - bodyWidth);\n          }\n        } else {\n          this.tagBodyLeft = 0;\n        }\n      }\n    },\n    handleTagsOption: function handleTagsOption(type) {\n      var _this = this;\n\n      if (type.includes('all')) {\n        // 关闭所有，除了home\n        var res = this.list.filter(function (item) {\n          return item.name === _this.$config.homeName;\n        });\n        this.$emit('on-close', res, 'all');\n      } else if (type.includes('others')) {\n        // 关闭除当前页和home页的其他页\n        var _res = this.list.filter(function (item) {\n          return routeEqual(_this.currentRouteObj, item) || item.name === _this.$config.homeName;\n        });\n\n        this.$emit('on-close', _res, 'others', this.currentRouteObj);\n        setTimeout(function () {\n          _this.getTagElementByName(_this.currentRouteObj.name);\n        }, 100);\n      }\n    },\n    // 点击关闭触发\n    handleClose: function handleClose(current) {\n      var _this2 = this;\n\n      if (current.meta && current.meta.beforeCloseName && current.meta.beforeCloseName in beforeClose) {\n        new Promise(beforeClose[current.meta.beforeCloseName]).then(function (close) {\n          if (close) {\n            _this2.close(current);\n          }\n        });\n      } else {\n        this.close(current);\n      }\n    },\n    close: function close(route) {\n      var res = this.list.filter(function (item) {\n        return !routeEqual(route, item);\n      });\n      this.$emit('on-close', res, undefined, route);\n    },\n    handleClick: function handleClick(item) {\n      this.$emit('input', item);\n    },\n    showTitleInside: function showTitleInside(item) {\n      return showTitle(item, this);\n    },\n    isCurrentTag: function isCurrentTag(item) {\n      return routeEqual(this.currentRouteObj, item);\n    },\n    moveToView: function moveToView(tag) {\n      var outerWidth = this.$refs.scrollOuter.offsetWidth;\n      var bodyWidth = this.$refs.scrollBody.offsetWidth;\n\n      if (bodyWidth < outerWidth) {\n        this.tagBodyLeft = 0;\n      } else if (tag.offsetLeft < -this.tagBodyLeft) {\n        // 标签在可视区域左侧\n        this.tagBodyLeft = -tag.offsetLeft + this.outerPadding;\n      } else if (tag.offsetLeft > -this.tagBodyLeft && tag.offsetLeft + tag.offsetWidth < -this.tagBodyLeft + outerWidth) {\n        // 标签在可视区域\n        this.tagBodyLeft = Math.min(0, outerWidth - tag.offsetWidth - tag.offsetLeft - this.outerPadding);\n      } else {\n        // 标签在可视区域右侧\n        this.tagBodyLeft = -(tag.offsetLeft - (outerWidth - this.outerPadding - tag.offsetWidth));\n      }\n    },\n    getTagElementByName: function getTagElementByName(route) {\n      var _this3 = this;\n\n      this.$nextTick(function () {\n        _this3.refsTag = _this3.$refs.tagsPageOpened;\n\n        _this3.refsTag.forEach(function (item, index) {\n          if (routeEqual(route, item.$attrs['data-route-item'])) {\n            var tag = _this3.refsTag[index].$el;\n\n            _this3.moveToView(tag);\n          }\n        });\n      });\n    },\n    contextMenu: function contextMenu(item, e) {\n      if (item.name === this.$config.homeName) {\n        return;\n      }\n\n      this.visible = true;\n      var offsetLeft = this.$el.getBoundingClientRect().left;\n      this.contextMenuLeft = e.clientX - offsetLeft + 10;\n      this.contextMenuTop = e.clientY - 64;\n    },\n    closeMenu: function closeMenu() {\n      this.visible = false;\n    }\n  },\n  watch: {\n    '$route': function $route(to) {\n      this.getTagElementByName(to);\n    },\n    visible: function visible(value) {\n      if (value) {\n        document.body.addEventListener('click', this.closeMenu);\n      } else {\n        document.body.removeEventListener('click', this.closeMenu);\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this4 = this;\n\n    setTimeout(function () {\n      _this4.getTagElementByName(_this4.$route);\n    }, 200);\n  }\n};",{"version":3,"sources":["tags-nav.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;AACA;AACA;QAEA;;WAEA;;YAEA;mCACA;eACA;AACA,AACA,AACA;AANA;AAFA;wBASA;;mBAEA;mBACA;oBACA;uBACA;sBACA;eACA;;gBAEA;aACA,AACA,AACA;AAJA;AAPA;AAYA;;;AAEA,6BACA;;;;;;;AACA;;AACA,AACA;AALA;;2CAOA;mBACA;kBACA;;8DACA;iEACA;AACA;;wBACA;AACA;gDACA;8CACA;4CACA;;sBACA;0DACA;aACA;oCACA;4DACA;oCACA;iBACA;gFACA;AACA;eACA;6BACA;AACA;AACA;AACA;;AACA;;gCACA;AACA;;6CACA;;oCACA;0CACA;AACA;;wFACA;;;oDACA;+BACA;0DACA;WACA;AACA;AACA;AACA;;AACA;;uGACA;qFACA;qBACA;yBACA;AACA;AACA;aACA;mBACA;AACA;AACA;iCACA;;kCACA;;6CACA;AACA;4CACA;0BACA;AACA;oDACA;6BACA;AACA;8CACA;8CACA;AACA;yCACA;8CACA;4CACA;;kCACA;2BACA;qDACA;AACA;kDACA;0HACA;AACA;4FACA;aACA;AACA;oFACA;AACA;AACA;;AACA;;iCACA;sCACA;;sDACA;iEACA;4CACA;;8BACA;AACA;AACA;AACA;AACA;+CACA;+CACA;AACA;AACA;;qBACA;wDACA;sDACA;wCACA;AACA;oCACA;qBACA;AACA,AACA;AAxGA;;kCA0GA;+BACA;AACA;qCACA;iBACA;qDACA;aACA;wDACA;AACA;AACA,AACA;AAXA;;AAYA;;2BACA;wCACA;OACA;AACA;AAxJA","file":"tags-nav.vue","sourceRoot":"src\\components\\main-new\\components\\tags-nav","sourcesContent":["<template>\r\n  <div class=\"tags-nav\">\r\n    <div class=\"close-con\">\r\n      <Dropdown transfer @on-click=\"handleTagsOption\" style=\"margin-top:7px;\">\r\n        <Button size=\"small\" type=\"text\">\r\n          <Icon :size=\"18\" type=\"ios-close-circle-outline\" />\r\n        </Button>\r\n        <DropdownMenu slot=\"list\">\r\n          <DropdownItem name=\"close-all\">关闭所有</DropdownItem>\r\n          <DropdownItem name=\"close-others\">关闭其他</DropdownItem>\r\n        </DropdownMenu>\r\n      </Dropdown>\r\n    </div>\r\n    <ul v-show=\"visible\" :style=\"{left: contextMenuLeft + 'px', top: contextMenuTop + 'px'}\" class=\"contextmenu\">\r\n      <li v-for=\"(item, key) of menuList\" @click=\"handleTagsOption(key)\" :key=\"key\">{{item}}</li>\r\n    </ul>\r\n    <div class=\"btn-con left-btn\">\r\n      <Button type=\"text\" @click=\"handleScroll(240)\">\r\n        <Icon :size=\"18\" type=\"ios-arrow-back\" />\r\n      </Button>\r\n    </div>\r\n    <div class=\"btn-con right-btn\">\r\n      <Button type=\"text\" @click=\"handleScroll(-240)\">\r\n        <Icon :size=\"18\" type=\"ios-arrow-forward\" />\r\n      </Button>\r\n    </div>\r\n    <div class=\"scroll-outer\" ref=\"scrollOuter\" @DOMMouseScroll=\"handlescroll\" @mousewheel=\"handlescroll\">\r\n      <div ref=\"scrollBody\" class=\"scroll-body\" :style=\"{left: tagBodyLeft + 'px'}\">\r\n        <transition-group name=\"taglist-moving-animation\">\r\n          <Tag\r\n            type=\"dot\"\r\n            v-for=\"(item, index) in list\"\r\n            ref=\"tagsPageOpened\"\r\n            :key=\"`tag-nav-${index}`\"\r\n            :name=\"item.name\"\r\n            :data-route-item=\"item\"\r\n            @on-close=\"handleClose(item)\"\r\n            @click.native=\"handleClick(item)\"\r\n            :closable=\"item.name !== $config.homeName\"\r\n            :color=\"isCurrentTag(item) ? 'primary' : 'default'\"\r\n            @contextmenu.prevent.native=\"contextMenu(item, $event)\"\r\n          >{{ showTitleInside(item) }}</Tag>\r\n        </transition-group>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { showTitle, routeEqual } from '@/libs/util'\r\nimport beforeClose from '@/router/before-close'\r\nexport default {\r\n  name: 'TagsNav',\r\n  props: {\r\n    value: Object,\r\n    list: {\r\n      type: Array,\r\n      default () {\r\n        return []\r\n      }\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      tagBodyLeft: 0,\r\n      rightOffset: 40,\r\n      outerPadding: 4,\r\n      contextMenuLeft: 0,\r\n      contextMenuTop: 0,\r\n      visible: false,\r\n      menuList: {\r\n        others: '关闭其他',\r\n        all: '关闭所有'\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    currentRouteObj () {\r\n      const { name, params, query } = this.value\r\n      return { name, params, query }\r\n    }\r\n  },\r\n  methods: {\r\n    handlescroll (e) {\r\n      var type = e.type\r\n      let delta = 0\r\n      if (type === 'DOMMouseScroll' || type === 'mousewheel') {\r\n        delta = (e.wheelDelta) ? e.wheelDelta : -(e.detail || 0) * 40\r\n      }\r\n      this.handleScroll(delta)\r\n    },\r\n    handleScroll (offset) {\r\n      const outerWidth = this.$refs.scrollOuter.offsetWidth\r\n      const bodyWidth = this.$refs.scrollBody.offsetWidth\r\n      if (offset > 0) {\r\n        this.tagBodyLeft = Math.min(0, this.tagBodyLeft + offset)\r\n      } else {\r\n        if (outerWidth < bodyWidth) {\r\n          if (this.tagBodyLeft < -(bodyWidth - outerWidth)) {\r\n            this.tagBodyLeft = this.tagBodyLeft\r\n          } else {\r\n            this.tagBodyLeft = Math.max(this.tagBodyLeft + offset, outerWidth - bodyWidth)\r\n          }\r\n        } else {\r\n          this.tagBodyLeft = 0\r\n        }\r\n      }\r\n    },\r\n    handleTagsOption (type) {\r\n      if (type.includes('all')) {\r\n        // 关闭所有，除了home\r\n        let res = this.list.filter(item => item.name === this.$config.homeName)\r\n        this.$emit('on-close', res, 'all')\r\n      } else if (type.includes('others')) {\r\n        // 关闭除当前页和home页的其他页\r\n        let res = this.list.filter(item => routeEqual(this.currentRouteObj, item) || item.name === this.$config.homeName)\r\n        this.$emit('on-close', res, 'others', this.currentRouteObj)\r\n        setTimeout(() => {\r\n          this.getTagElementByName(this.currentRouteObj.name)\r\n        }, 100)\r\n      }\r\n    },\r\n    // 点击关闭触发\r\n    handleClose (current) {\r\n      if (current.meta && current.meta.beforeCloseName && current.meta.beforeCloseName in beforeClose) {\r\n        new Promise(beforeClose[current.meta.beforeCloseName]).then(close => {\r\n          if (close) {\r\n            this.close(current)\r\n          }\r\n        })\r\n      } else {\r\n        this.close(current)\r\n      }\r\n    },\r\n    close (route) {\r\n      let res = this.list.filter(item => !routeEqual(route, item))\r\n      this.$emit('on-close', res, undefined, route)\r\n    },\r\n    handleClick (item) {\r\n      this.$emit('input', item)\r\n    },\r\n    showTitleInside (item) {\r\n      return showTitle(item, this)\r\n    },\r\n    isCurrentTag (item) {\r\n      return routeEqual(this.currentRouteObj, item)\r\n    },\r\n    moveToView (tag) {\r\n      const outerWidth = this.$refs.scrollOuter.offsetWidth\r\n      const bodyWidth = this.$refs.scrollBody.offsetWidth\r\n      if (bodyWidth < outerWidth) {\r\n        this.tagBodyLeft = 0\r\n      } else if (tag.offsetLeft < -this.tagBodyLeft) {\r\n        // 标签在可视区域左侧\r\n        this.tagBodyLeft = -tag.offsetLeft + this.outerPadding\r\n      } else if (tag.offsetLeft > -this.tagBodyLeft && tag.offsetLeft + tag.offsetWidth < -this.tagBodyLeft + outerWidth) {\r\n        // 标签在可视区域\r\n        this.tagBodyLeft = Math.min(0, outerWidth - tag.offsetWidth - tag.offsetLeft - this.outerPadding)\r\n      } else {\r\n        // 标签在可视区域右侧\r\n        this.tagBodyLeft = -(tag.offsetLeft - (outerWidth - this.outerPadding - tag.offsetWidth))\r\n      }\r\n    },\r\n    getTagElementByName (route) {\r\n      this.$nextTick(() => {\r\n        this.refsTag = this.$refs.tagsPageOpened\r\n        this.refsTag.forEach((item, index) => {\r\n          if (routeEqual(route, item.$attrs['data-route-item'])) {\r\n            let tag = this.refsTag[index].$el\r\n            this.moveToView(tag)\r\n          }\r\n        })\r\n      })\r\n    },\r\n    contextMenu (item, e) {\r\n      if (item.name === this.$config.homeName) {\r\n        return\r\n      }\r\n      this.visible = true\r\n      const offsetLeft = this.$el.getBoundingClientRect().left\r\n      this.contextMenuLeft = e.clientX - offsetLeft + 10\r\n      this.contextMenuTop = e.clientY - 64\r\n    },\r\n    closeMenu () {\r\n      this.visible = false\r\n    }\r\n  },\r\n  watch: {\r\n    '$route' (to) {\r\n      this.getTagElementByName(to)\r\n    },\r\n    visible (value) {\r\n      if (value) {\r\n        document.body.addEventListener('click', this.closeMenu)\r\n      } else {\r\n        document.body.removeEventListener('click', this.closeMenu)\r\n      }\r\n    }\r\n  },\r\n  mounted () {\r\n    setTimeout(() => {\r\n      this.getTagElementByName(this.$route)\r\n    }, 200)\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n@import './tags-nav.less';\r\n</style>\r\n"]}]}