{"remainingRequest":"D:\\Vue_WorkSpace\\sg-Admin\\node_modules\\babel-loader\\lib\\index.js!D:\\Vue_WorkSpace\\sg-Admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Vue_WorkSpace\\sg-Admin\\src\\components\\main-new\\components\\side-menu\\collapsed-menu.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\Vue_WorkSpace\\sg-Admin\\src\\components\\main-new\\components\\side-menu\\collapsed-menu.vue","mtime":1551411055152},{"path":"D:\\Vue_WorkSpace\\sg-Admin\\.babelrc","mtime":1551258011000},{"path":"D:\\Vue_WorkSpace\\sg-Admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1551930361523},{"path":"D:\\Vue_WorkSpace\\sg-Admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1526583314000},{"path":"D:\\Vue_WorkSpace\\sg-Admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1526010763000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport mixin from './mixin';\nimport itemMixin from './item-mixin';\nimport { findNodeUpperByClasses } from '@/libs/util';\nexport default {\n  name: 'CollapsedMenu',\n  mixins: [mixin, itemMixin],\n  props: {\n    hideTitle: {\n      type: Boolean,\n      default: false\n    },\n    rootIconSize: {\n      type: Number,\n      default: 16\n    }\n  },\n  data: function data() {\n    return {\n      placement: 'right-end'\n    };\n  },\n  methods: {\n    handleClick: function handleClick(name) {\n      this.$emit('on-click', name);\n    },\n    handleMousemove: function handleMousemove(event, children) {\n      var pageY = event.pageY;\n      var height = children.length * 38;\n      var isOverflow = pageY + height < window.innerHeight;\n      this.placement = isOverflow ? 'right-start' : 'right-end';\n    }\n  },\n  mounted: function mounted() {\n    var dropdown = findNodeUpperByClasses(this.$refs.dropdown.$el, ['ivu-select-dropdown', 'ivu-dropdown-transfer']);\n    if (dropdown) dropdown.style.overflow = 'visible';\n  }\n};",{"version":3,"sources":["collapsed-menu.vue"],"names":[],"mappings":";;;;;;;;;;;AAYA;AACA;AACA;AAEA;QAEA;kBACA;;;YAGA;eACA,AACA;AAHA;;YAKA;eACA,AACA,AACA;AAJA;AALA;wBAUA;;iBAEA,AACA;AAFA;AAGA;;4CAEA;6BACA;AACA;;AACA,kBACA;qCACA;+CACA;oDACA;AACA,AACA;AAVA;8BAWA;2FACA;4CACA;AACA;AAhCA","file":"collapsed-menu.vue","sourceRoot":"src\\components\\main-new\\components\\side-menu","sourcesContent":["<template>\r\n  <Dropdown ref=\"dropdown\" @on-click=\"handleClick\" :class=\"hideTitle ? '' : 'collased-menu-dropdown'\" :transfer=\"hideTitle\" :placement=\"placement\">\r\n    <a class=\"drop-menu-a\" type=\"text\" @mouseover=\"handleMousemove($event, children)\" :style=\"{textAlign: !hideTitle ? 'left' : ''}\"><common-icon :size=\"rootIconSize\" :color=\"textColor\" :type=\"parentItem.icon\"/><span class=\"menu-title\" v-if=\"!hideTitle\">{{ showTitle(parentItem) }}</span><Icon style=\"float: right;\" v-if=\"!hideTitle\" type=\"ios-arrow-forward\" :size=\"16\"/></a>\r\n    <DropdownMenu ref=\"dropdown\" slot=\"list\">\r\n      <template v-for=\"child in children\">\r\n        <collapsed-menu v-if=\"showChildren(child)\" :icon-size=\"iconSize\" :parent-item=\"child\" :key=\"`drop-${child.name}`\"></collapsed-menu>\r\n        <DropdownItem v-else :key=\"`drop-${child.name}`\" :name=\"child.name\"><common-icon :size=\"iconSize\" :type=\"child.icon\"/><span class=\"menu-title\">{{ showTitle(child) }}</span></DropdownItem>\r\n      </template>\r\n    </DropdownMenu>\r\n  </Dropdown>\r\n</template>\r\n<script>\r\nimport mixin from './mixin'\r\nimport itemMixin from './item-mixin'\r\nimport { findNodeUpperByClasses } from '@/libs/util'\r\n\r\nexport default {\r\n  name: 'CollapsedMenu',\r\n  mixins: [ mixin, itemMixin ],\r\n  props: {\r\n    hideTitle: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    rootIconSize: {\r\n      type: Number,\r\n      default: 16\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      placement: 'right-end'\r\n    }\r\n  },\r\n  methods: {\r\n    handleClick (name) {\r\n      this.$emit('on-click', name)\r\n    },\r\n    handleMousemove (event, children) {\r\n      const { pageY } = event\r\n      const height = children.length * 38\r\n      const isOverflow = pageY + height < window.innerHeight\r\n      this.placement = isOverflow ? 'right-start' : 'right-end'\r\n    }\r\n  },\r\n  mounted () {\r\n    let dropdown = findNodeUpperByClasses(this.$refs.dropdown.$el, ['ivu-select-dropdown', 'ivu-dropdown-transfer'])\r\n    if (dropdown) dropdown.style.overflow = 'visible'\r\n  }\r\n}\r\n</script>\r\n"]}]}