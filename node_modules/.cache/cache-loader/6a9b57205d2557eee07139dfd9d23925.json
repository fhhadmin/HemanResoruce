{"remainingRequest":"D:\\Vue_WorkSpace\\hr-Admin\\HemanResoruce\\node_modules\\babel-loader\\lib\\index.js!D:\\Vue_WorkSpace\\hr-Admin\\HemanResoruce\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Vue_WorkSpace\\hr-Admin\\HemanResoruce\\src\\view\\userManagement\\cpmponents\\roleTable-Tree.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\Vue_WorkSpace\\hr-Admin\\HemanResoruce\\src\\view\\userManagement\\cpmponents\\roleTable-Tree.vue","mtime":1552470636499},{"path":"D:\\Vue_WorkSpace\\hr-Admin\\HemanResoruce\\.babelrc","mtime":1551258011000},{"path":"D:\\Vue_WorkSpace\\hr-Admin\\HemanResoruce\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1551930361523},{"path":"D:\\Vue_WorkSpace\\hr-Admin\\HemanResoruce\\node_modules\\babel-loader\\lib\\index.js","mtime":1526583314000},{"path":"D:\\Vue_WorkSpace\\hr-Admin\\HemanResoruce\\node_modules\\vue-loader\\lib\\index.js","mtime":1526010763000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.map\";\n//\n//\n//\n//\n//\nimport clonedeep from 'clonedeep';\nimport { queryUserById } from '@/api/userManagement/message';\nimport permissionSetting from '@/config/permissionSetting';\nexport default {\n  data: function data() {\n    return {\n      dataTree: clonedeep(permissionSetting.jurisdiction),\n      selectList: [],\n      idValue: ''\n    };\n  },\n  props: {\n    id: {\n      type: String,\n      required: true\n    }\n  },\n  methods: {\n    getSelectTree: function getSelectTree(e) {\n      var _this = this;\n\n      var childrenListData = new Map();\n      var fatherListData = new Map();\n      var selectList = this.$refs.Tree.getCheckedAndIndeterminateNodes();\n      selectList.forEach(function (item, index) {\n        if (item.children) {\n          var _this$filteringData = _this.filteringData(item),\n              fatherList = _this$filteringData.fatherList;\n\n          fatherList.forEach(function (items) {\n            fatherListData.set(items.value, items);\n          });\n        } else {\n          childrenListData.set(item.value, item);\n        }\n      });\n      this.$emit('selectUp', this.mergeList(fatherListData, childrenListData));\n    },\n    // 区分父子\n    filteringData: function filteringData(item) {\n      var fatherList = [];\n      var childrenList = [];\n\n      var handle = function handle(itemChildren) {\n        if (itemChildren.children) {\n          fatherList.push({\n            checked: itemChildren.checked,\n            indeterminate: itemChildren.indeterminate,\n            nodeKey: itemChildren.nodeKey,\n            title: itemChildren.title,\n            value: itemChildren.value,\n            id: itemChildren.id\n          });\n          itemChildren.children.forEach(function (childrenItem) {\n            handle(childrenItem);\n          });\n        } else {\n          childrenList.push({\n            checked: itemChildren.checked,\n            indeterminate: itemChildren.indeterminate,\n            nodeKey: itemChildren.nodeKey,\n            title: itemChildren.title,\n            value: itemChildren.value,\n            id: itemChildren.id\n          });\n        }\n\n        return {\n          fatherList: fatherList,\n          childrenList: childrenList\n        };\n      };\n\n      return handle(item);\n    },\n    // 合并数组\n    mergeList: function mergeList(fatherListData, childrenListData) {\n      var childrenList = clonedeep(childrenListData);\n      var fatherList = clonedeep(fatherListData);\n      var dataList = [];\n      fatherList.forEach(function (fatherValue) {\n        childrenList.forEach(function (value, key) {\n          // 判断标识\n          if (value.id === fatherValue.id) {\n            if (fatherValue.children) fatherValue.children.push(value);else fatherValue.children = [].concat(value);\n            childrenList.delete(key);\n          }\n        });\n      });\n      fatherList.forEach(function (fatherValue) {\n        dataList.push(fatherValue);\n      });\n      return dataList;\n    },\n    // 合并已有\n    mergeAlready: function mergeAlready(list, newList) {\n      if (newList.length === 0) return clonedeep(permissionSetting.jurisdiction); // 原有数据\n\n      var listData = clonedeep(list); // 循环数据\n\n      var listFor = clonedeep(list);\n\n      var recursionList = function recursionList(n, i) {\n        if (!n) return n;\n        i.forEach(function (item, index) {\n          n.forEach(function (itemNew) {\n            if (item.value === itemNew.value) {\n              i[index] = itemNew;\n              if (item.children && itemNew.children) recursionList(itemNew.children, item.children);\n            }\n          });\n        });\n        return i;\n      };\n\n      listFor.forEach(function (item, index) {\n        newList.forEach(function (itemNew) {\n          if (item.value === itemNew.value) {\n            if (!item.children && !itemNew.children) {\n              listData[index].checked = itemNew.checked;\n              listData[index].id = itemNew.id;\n              listData[index].indeterminate = itemNew.indeterminate;\n              listData[index].nodeKey = itemNew.nodeKey;\n              listData[index].title = itemNew.title;\n              listData[index].value = itemNew.value;\n            } else {\n              listData[index].checked = itemNew.checked;\n              listData[index].id = itemNew.id;\n              listData[index].indeterminate = itemNew.indeterminate;\n              listData[index].nodeKey = itemNew.nodeKey;\n              listData[index].title = itemNew.title;\n              listData[index].value = itemNew.value;\n              listData[index].children = recursionList(itemNew.children, item.children);\n            }\n          }\n        });\n      });\n      return listData;\n    },\n    // 得到已有权限\n    getRoleMenuList: function getRoleMenuList(e) {\n      var _this2 = this;\n\n      if (!e) {\n        this.mergeAlready(this.dataTree, []);\n      } else {\n        queryUserById(e).then(function (res) {\n          var data = [];\n\n          if (res.data.permission) {\n            data = JSON.parse(res.data.permission);\n          }\n\n          _this2.dataTree = _this2.mergeAlready(_this2.dataTree, clonedeep(data));\n        }).catch(function (err) {\n          _this2.$Message.error(err.msg);\n        });\n      }\n    }\n  },\n  mounted: function mounted() {},\n  watch: {\n    id: function id(e) {\n      this.idValue = e.split('.')[0];\n      this.getRoleMenuList(this.idValue);\n      this.dataTree = clonedeep(permissionSetting.jurisdiction);\n    }\n  }\n};",{"version":3,"sources":["roleTable-Tree.vue"],"names":[],"mappings":";;;;;;;AAMA;AACA;AACA;AACA;wBAEA;;4CAEA;kBACA;eACA,AACA;AAJA;AAKA;;;YAGA;gBACA,AACA,AACA;AAJA;AADA;;;AAOA;;iCACA;+BACA;uCACA;gDACA;;AACA,wDACA;;;8CACA;4CACA;AACA;eACA;2CACA;AACA;AACA;4DACA;AACA;AACA;gDACA;uBACA;yBACA;;iDACA;mCACA;;kCAEA;wCACA;kCACA;gCACA;gCACA;6BACA,AACA;AAPA;gEAQA;mBACA;AACA;eACA;;kCAEA;wCACA;kCACA;gCACA;gCACA;6BACA,AACA;AAPA;AAQA;;;;AAEA,AACA;AAFA;AAGA;;oBACA;AACA;AACA;oEACA;mCACA;iCACA;qBACA;gDACA;mDACA;AACA;2CACA;gEACA,6CACA;gCACA;AACA;AACA;AACA;gDACA;sBACA;AACA;aACA;AACA;AACA;;mEAEA,eACA;;+BACA,MAHA,CAIA;;8BACA;;uDACA;uBACA;yCACA;uCACA;8CACA;yBACA;0FACA;AACA;AACA;AACA;eACA;AACA;;6CACA;2CACA;4CACA;qDACA;gDACA;2CACA;sDACA;gDACA;8CACA;8CACA;mBACA;gDACA;2CACA;sDACA;gDACA;8CACA;8CACA;8EACA;AACA;AACA;AACA;AACA;aACA;AACA;AACA;;AACA;;cACA;yCACA;aACA;6CACA;qBACA;;mCACA;uCACA;AACA;;2EACA;gCACA;oCACA;AACA;AACA;AACA,AACA;AAjIA;8BAmIA,CACA;;uBAEA;kCACA;gCACA;kDACA;AACA,AACA;AANA;AAnJA","file":"roleTable-Tree.vue","sourceRoot":"src\\view\\userManagement\\cpmponents","sourcesContent":["<template>\n  <div>\n    <Tree :data=\"dataTree\" show-checkbox @on-check-change=\"getSelectTree\" ref=\"Tree\"></Tree>\n  </div>\n</template>\n<script>\nimport clonedeep from 'clonedeep'\nimport { queryUserById } from '@/api/userManagement/message'\nimport permissionSetting from '@/config/permissionSetting'\nexport default ({\n  data () {\n    return {\n      dataTree: clonedeep(permissionSetting.jurisdiction),\n      selectList: [],\n      idValue: ''\n    }\n  },\n  props: {\n    id: {\n      type: String,\n      required: true\n    }\n  },\n  methods: {\n    getSelectTree (e) {\n      let childrenListData = new Map()\n      let fatherListData = new Map()\n      let selectList = this.$refs.Tree.getCheckedAndIndeterminateNodes()\n      selectList.forEach((item, index) => {\n        if (item.children) {\n          let {fatherList} = this.filteringData(item)\n          fatherList.forEach(items => {\n            fatherListData.set(items.value, items)\n          })\n        } else {\n          childrenListData.set(item.value, item)\n        }\n      })\n      this.$emit('selectUp', this.mergeList(fatherListData, childrenListData))\n    },\n    // 区分父子\n    filteringData (item) {\n      let fatherList = []\n      let childrenList = []\n      const handle = itemChildren => {\n        if (itemChildren.children) {\n          fatherList.push({\n            checked: itemChildren.checked,\n            indeterminate: itemChildren.indeterminate,\n            nodeKey: itemChildren.nodeKey,\n            title: itemChildren.title,\n            value: itemChildren.value,\n            id: itemChildren.id\n          })\n          itemChildren.children.forEach((childrenItem) => {\n            handle(childrenItem)\n          })\n        } else {\n          childrenList.push({\n            checked: itemChildren.checked,\n            indeterminate: itemChildren.indeterminate,\n            nodeKey: itemChildren.nodeKey,\n            title: itemChildren.title,\n            value: itemChildren.value,\n            id: itemChildren.id\n          })\n        }\n        return {\n          fatherList, childrenList\n        }\n      }\n      return handle(item)\n    },\n    // 合并数组\n    mergeList (fatherListData, childrenListData) {\n      let childrenList = clonedeep(childrenListData)\n      let fatherList = clonedeep(fatherListData)\n      let dataList = []\n      fatherList.forEach((fatherValue) => {\n        childrenList.forEach((value, key) => {\n          // 判断标识\n          if (value.id === fatherValue.id) {\n            if (fatherValue.children) fatherValue.children.push(value)\n            else fatherValue.children = [].concat(value)\n            childrenList.delete(key)\n          }\n        })\n      })\n      fatherList.forEach((fatherValue) => {\n        dataList.push(fatherValue)\n      })\n      return dataList\n    },\n    // 合并已有\n    mergeAlready (list, newList) {\n      if (newList.length === 0) return clonedeep(permissionSetting.jurisdiction)\n      // 原有数据\n      let listData = clonedeep(list)\n      // 循环数据\n      let listFor = clonedeep(list)\n      const recursionList = (n, i) => {\n        if (!n) return n\n        i.forEach((item, index) => {\n          n.forEach(itemNew => {\n            if (item.value === itemNew.value) {\n              i[index] = itemNew\n              if (item.children && itemNew.children) recursionList(itemNew.children, item.children)\n            }\n          })\n        })\n        return i\n      }\n      listFor.forEach((item, index) => {\n        newList.forEach(itemNew => {\n          if (item.value === itemNew.value) {\n            if (!item.children && !itemNew.children) {\n              listData[index].checked = itemNew.checked\n              listData[index].id = itemNew.id\n              listData[index].indeterminate = itemNew.indeterminate\n              listData[index].nodeKey = itemNew.nodeKey\n              listData[index].title = itemNew.title\n              listData[index].value = itemNew.value\n            } else {\n              listData[index].checked = itemNew.checked\n              listData[index].id = itemNew.id\n              listData[index].indeterminate = itemNew.indeterminate\n              listData[index].nodeKey = itemNew.nodeKey\n              listData[index].title = itemNew.title\n              listData[index].value = itemNew.value\n              listData[index].children = recursionList(itemNew.children, item.children)\n            }\n          }\n        })\n      })\n      return listData\n    },\n    // 得到已有权限\n    getRoleMenuList (e) {\n      if (!e) {\n        this.mergeAlready(this.dataTree, [])\n      } else {\n        queryUserById(e).then(res => {\n          let data = []\n          if (res.data.permission) {\n            data = JSON.parse(res.data.permission)\n          }\n          this.dataTree = this.mergeAlready(this.dataTree, clonedeep(data))\n        }).catch((err) => {\n          this.$Message.error(err.msg)\n        })\n      }\n    }\n  },\n  mounted () {\n\n  },\n  watch: {\n    id (e) {\n      this.idValue = e.split('.')[0]\n      this.getRoleMenuList(this.idValue)\n      this.dataTree = clonedeep(permissionSetting.jurisdiction)\n    }\n  }\n})\n</script>\n<style>\n\n</style>\n"]}]}