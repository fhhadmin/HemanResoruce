{"remainingRequest":"D:\\Vue_WorkSpace\\sg-Admin\\node_modules\\babel-loader\\lib\\index.js!D:\\Vue_WorkSpace\\sg-Admin\\src\\store\\module\\app.js","dependencies":[{"path":"D:\\Vue_WorkSpace\\sg-Admin\\src\\store\\module\\app.js","mtime":1551411055231},{"path":"D:\\Vue_WorkSpace\\sg-Admin\\.babelrc","mtime":1551258011000},{"path":"D:\\Vue_WorkSpace\\sg-Admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1551930361523},{"path":"D:\\Vue_WorkSpace\\sg-Admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1526583314000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.function.name\";\nimport _toConsumableArray from \"D:\\\\Vue_WorkSpace\\\\sg-Admin\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/toConsumableArray\";\nimport { getBreadCrumbList, setTagNavListInLocalstorage, getMenuByRouter, getTagNavListFromLocalstorage, getHomeRoute, getRouteTitleHandled, routeHasExist } from '@/libs/util';\nimport config from '@/config';\nimport routers from '@/router/routers';\nvar homeName = config.homeName;\nexport default {\n  state: {\n    breadCrumbList: [],\n    tagNavList: [],\n    homeRoute: {}\n  },\n  getters: {\n    menuList: function menuList(state, getters, rootState) {\n      return getMenuByRouter(routers, rootState.user.access);\n    }\n  },\n  mutations: {\n    setHomeRoute: function setHomeRoute(state, routes) {\n      state.homeRoute = getHomeRoute(routes, homeName);\n    },\n    setBreadCrumb: function setBreadCrumb(state, routeMetched) {\n      state.breadCrumbList = getBreadCrumbList(routeMetched, state.homeRoute);\n    },\n    setTagNavList: function setTagNavList(state, list) {\n      console.log(state, list);\n      var tagList = [];\n\n      if (list) {\n        tagList = _toConsumableArray(list);\n      } else tagList = getTagNavListFromLocalstorage() || [];\n\n      if (tagList[0] && tagList[0].name !== homeName) tagList.shift();\n      var homeTagIndex = tagList.findIndex(function (item) {\n        return item.name === homeName;\n      });\n\n      if (homeTagIndex > 0) {\n        var homeTag = tagList.splice(homeTagIndex, 1)[0];\n        tagList.unshift(homeTag);\n      }\n\n      state.tagNavList = tagList;\n      setTagNavListInLocalstorage(_toConsumableArray(tagList));\n    },\n    addTag: function addTag(state, _ref) {\n      var route = _ref.route,\n          _ref$type = _ref.type,\n          type = _ref$type === void 0 ? 'unshift' : _ref$type;\n      var router = getRouteTitleHandled(route);\n\n      if (!routeHasExist(state.tagNavList, router)) {\n        if (type === 'push') state.tagNavList.push(router);else {\n          if (router.name === homeName) state.tagNavList.unshift(router);else state.tagNavList.splice(1, 0, router);\n        }\n        setTagNavListInLocalstorage(_toConsumableArray(state.tagNavList));\n      }\n    }\n  }\n};",{"version":3,"sources":["src\\store\\module\\app.js"],"names":["getBreadCrumbList","setTagNavListInLocalstorage","getMenuByRouter","getTagNavListFromLocalstorage","getHomeRoute","getRouteTitleHandled","routeHasExist","config","routers","homeName","state","breadCrumbList","tagNavList","homeRoute","getters","menuList","rootState","user","access","mutations","setHomeRoute","routes","setBreadCrumb","routeMetched","setTagNavList","list","console","log","tagList","name","shift","homeTagIndex","findIndex","item","homeTag","splice","unshift","addTag","route","type","router","push"],"mappings":";;;AAAA,SAASA,iBAAT,EAA4BC,2BAA5B,EAAyDC,eAAzD,EAA0EC,6BAA1E,EAAyGC,YAAzG,EAAuHC,oBAAvH,EAA6IC,aAA7I,QAAkK,aAAlK;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,kBAApB;IACQC,Q,GAAaF,M,CAAbE,Q;AACR,eAAe;AACbC,SAAO;AACLC,oBAAgB,EADX;AAELC,gBAAY,EAFP;AAGLC,eAAW;AAHN,GADM;AAMbC,WAAS;AACPC,cAAU,kBAACL,KAAD,EAAQI,OAAR,EAAiBE,SAAjB;AAAA,aAA+Bd,gBAAgBM,OAAhB,EAAyBQ,UAAUC,IAAV,CAAeC,MAAxC,CAA/B;AAAA;AADH,GANI;AASbC,aAAW;AACTC,gBADS,wBACKV,KADL,EACYW,MADZ,EACoB;AAC3BX,YAAMG,SAAN,GAAkBT,aAAaiB,MAAb,EAAqBZ,QAArB,CAAlB;AACD,KAHQ;AAITa,iBAJS,yBAIMZ,KAJN,EAIaa,YAJb,EAI2B;AAClCb,YAAMC,cAAN,GAAuBX,kBAAkBuB,YAAlB,EAAgCb,MAAMG,SAAtC,CAAvB;AACD,KANQ;AAOTW,iBAPS,yBAOMd,KAPN,EAOae,IAPb,EAOmB;AAC1BC,cAAQC,GAAR,CAAYjB,KAAZ,EAAmBe,IAAnB;AACA,UAAIG,UAAU,EAAd;;AACA,UAAIH,IAAJ,EAAU;AACRG,qCAAcH,IAAd;AACD,OAFD,MAEOG,UAAUzB,mCAAmC,EAA7C;;AACP,UAAIyB,QAAQ,CAAR,KAAcA,QAAQ,CAAR,EAAWC,IAAX,KAAoBpB,QAAtC,EAAgDmB,QAAQE,KAAR;AAChD,UAAIC,eAAeH,QAAQI,SAAR,CAAkB;AAAA,eAAQC,KAAKJ,IAAL,KAAcpB,QAAtB;AAAA,OAAlB,CAAnB;;AACA,UAAIsB,eAAe,CAAnB,EAAsB;AACpB,YAAIG,UAAUN,QAAQO,MAAR,CAAeJ,YAAf,EAA6B,CAA7B,EAAgC,CAAhC,CAAd;AACAH,gBAAQQ,OAAR,CAAgBF,OAAhB;AACD;;AACDxB,YAAME,UAAN,GAAmBgB,OAAnB;AACA3B,qDAAgC2B,OAAhC;AACD,KArBQ;AAsBTS,UAtBS,kBAsBD3B,KAtBC,QAsBmC;AAAA,UAA3B4B,KAA2B,QAA3BA,KAA2B;AAAA,2BAApBC,IAAoB;AAAA,UAApBA,IAAoB,0BAAb,SAAa;AAC1C,UAAIC,SAASnC,qBAAqBiC,KAArB,CAAb;;AACA,UAAI,CAAChC,cAAcI,MAAME,UAApB,EAAgC4B,MAAhC,CAAL,EAA8C;AAC5C,YAAID,SAAS,MAAb,EAAqB7B,MAAME,UAAN,CAAiB6B,IAAjB,CAAsBD,MAAtB,EAArB,KACK;AACH,cAAIA,OAAOX,IAAP,KAAgBpB,QAApB,EAA8BC,MAAME,UAAN,CAAiBwB,OAAjB,CAAyBI,MAAzB,EAA9B,KACK9B,MAAME,UAAN,CAAiBuB,MAAjB,CAAwB,CAAxB,EAA2B,CAA3B,EAA8BK,MAA9B;AACN;AACDvC,uDAAgCS,MAAME,UAAtC;AACD;AACF;AAhCQ;AATE,CAAf","sourceRoot":"D:\\Vue_WorkSpace\\sg-Admin","sourcesContent":["import { getBreadCrumbList, setTagNavListInLocalstorage, getMenuByRouter, getTagNavListFromLocalstorage, getHomeRoute, getRouteTitleHandled, routeHasExist } from '@/libs/util'\r\nimport config from '@/config'\r\nimport routers from '@/router/routers'\r\nconst { homeName } = config\r\nexport default {\r\n  state: {\r\n    breadCrumbList: [],\r\n    tagNavList: [],\r\n    homeRoute: {}\r\n  },\r\n  getters: {\r\n    menuList: (state, getters, rootState) => getMenuByRouter(routers, rootState.user.access)\r\n  },\r\n  mutations: {\r\n    setHomeRoute (state, routes) {\r\n      state.homeRoute = getHomeRoute(routes, homeName)\r\n    },\r\n    setBreadCrumb (state, routeMetched) {\r\n      state.breadCrumbList = getBreadCrumbList(routeMetched, state.homeRoute)\r\n    },\r\n    setTagNavList (state, list) {\r\n      console.log(state, list)\r\n      let tagList = []\r\n      if (list) {\r\n        tagList = [...list]\r\n      } else tagList = getTagNavListFromLocalstorage() || []\r\n      if (tagList[0] && tagList[0].name !== homeName) tagList.shift()\r\n      let homeTagIndex = tagList.findIndex(item => item.name === homeName)\r\n      if (homeTagIndex > 0) {\r\n        let homeTag = tagList.splice(homeTagIndex, 1)[0]\r\n        tagList.unshift(homeTag)\r\n      }\r\n      state.tagNavList = tagList\r\n      setTagNavListInLocalstorage([...tagList])\r\n    },\r\n    addTag (state, { route, type = 'unshift' }) {\r\n      let router = getRouteTitleHandled(route)\r\n      if (!routeHasExist(state.tagNavList, router)) {\r\n        if (type === 'push') state.tagNavList.push(router)\r\n        else {\r\n          if (router.name === homeName) state.tagNavList.unshift(router)\r\n          else state.tagNavList.splice(1, 0, router)\r\n        }\r\n        setTagNavListInLocalstorage([...state.tagNavList])\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}]}